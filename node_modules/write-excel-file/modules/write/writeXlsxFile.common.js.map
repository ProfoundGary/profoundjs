{"version":3,"file":"writeXlsxFile.common.js","names":["generateSheetXml","initStyles","initSharedStrings","validateSheetName","generateSheets","_ref","data","sheetName","sheetNames","schema","columns","images","headerStyle","getHeaderStyle","fontFamily","fontSize","orientation","stickyRowsCount","stickyColumnsCount","showGridLines","rightToLeft","dateFormat","_initSharedStrings","getSharedStrings","getSharedString","_initStyles","getStyles","getStyle","Array","isArray","Error","_iterator","_createForOfIteratorHelperLoose","_step","done","value","sheetsXml","sheetIndex","_iterator2","_step2","sheet","push","customFont","sheetId","sheets","map","i","id","name"],"sources":["../../source/write/writeXlsxFile.common.js"],"sourcesContent":["import generateSheetXml from './files/sheet.xml/sheet.xml.js'\r\nimport initStyles from './styles.js'\r\nimport initSharedStrings from './sharedStrings.js'\r\nimport validateSheetName from './validateSheetName.js'\r\n\r\nexport function generateSheets({\r\n  data,\r\n  sheetName,\r\n  sheetNames,\r\n  schema,\r\n  columns,\r\n  images,\r\n  headerStyle,\r\n  getHeaderStyle,\r\n  fontFamily,\r\n  fontSize,\r\n  orientation,\r\n  stickyRowsCount,\r\n  stickyColumnsCount,\r\n  showGridLines,\r\n  rightToLeft,\r\n  dateFormat\r\n}) {\r\n  const { getSharedStrings, getSharedString } = initSharedStrings()\r\n  const { getStyles, getStyle } = initStyles({ fontFamily, fontSize })\r\n\r\n  // Versions before `1.3.4` had a bug:\r\n  // In a \"write multiple sheets\" scenario, `columns` parameter\r\n  // wasn't required to be an array of `columns` for each sheet.\r\n  if (sheetNames) {\r\n    if (columns) {\r\n      if (!Array.isArray(columns[0])) {\r\n        throw new Error('In a \"write multiple sheets\" scenario, `columns` parameter must be an array of `columns` for each sheet.');\r\n      }\r\n    }\r\n  }\r\n\r\n  // If only a single sheet is being written,\r\n  // convert parameters to arrays as if multiple sheets were being written.\r\n  // This way, the code after this wouldn't bother about the parameters being arrays or not.\r\n  if (!sheetNames) {\r\n    sheetNames = [sheetName || 'Sheet1']\r\n    data = [data]\r\n    if (columns) {\r\n      columns = [columns]\r\n    }\r\n    if (schema) {\r\n      schema = [schema]\r\n    }\r\n    if (images) {\r\n      images = [images]\r\n    }\r\n  }\r\n\r\n  // Rename deprecated `headerStyle` parameter to `getHeaderStyle(columnSchema)`.\r\n  if (headerStyle && !getHeaderStyle) {\r\n    getHeaderStyle = () => headerStyle\r\n  }\r\n\r\n  // Validate sheet name.\r\n  for (const sheetName of sheetNames) {\r\n    validateSheetName(sheetName)\r\n  }\r\n\r\n  const sheetsXml = []\r\n  let sheetIndex = 0\r\n  for (const sheet of sheetNames) {\r\n    sheetsXml.push(generateSheetXml(data[sheetIndex], {\r\n      schema: schema && schema[sheetIndex],\r\n      columns: columns && columns[sheetIndex],\r\n      images: images && images[sheetIndex],\r\n      getHeaderStyle,\r\n      getStyle,\r\n      getSharedString,\r\n      customFont: fontFamily || fontSize,\r\n      dateFormat,\r\n      orientation,\r\n      stickyRowsCount,\r\n      stickyColumnsCount,\r\n      showGridLines,\r\n      rightToLeft,\r\n      sheetId: sheetIndex + 1\r\n    }))\r\n    sheetIndex++\r\n  }\r\n\r\n  return {\r\n    sheets: sheetNames.map((sheetName, i) => ({\r\n      id: i + 1,\r\n      name: sheetName,\r\n      data: sheetsXml[i],\r\n      images: images && images[i]\r\n    })),\r\n    getSharedStrings,\r\n    getStyles\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}