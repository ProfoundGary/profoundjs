{"version":3,"file":"rows.js","names":["generateRow","generateRows","data","_ref","schema","getHeaderStyle","getStyle","getSharedString","customFont","dateFormat","header","_iterator","_createForOfIteratorHelperLoose","_step","done","columnSchema","value","column","map","_objectSpread","type","String","align","DEFAULT_HEADER_STYLE","concat","row","getCellStyle","undefined","index","usesSchema","join","fontWeight"],"sources":["../../../../source/write/files/sheet.xml/rows.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/generatorRows.js\r\n\r\nimport generateRow from './row.js'\r\n\r\nexport default function generateRows(data, {\r\n\tschema,\r\n\tgetHeaderStyle,\r\n\tgetStyle,\r\n\tgetSharedString,\r\n\tcustomFont,\r\n\tdateFormat\r\n}) {\r\n\tif (schema) {\r\n\t\tlet header = []\r\n\t\tfor (const columnSchema of schema) {\r\n\t\t\t// If at least one schema column has a title specified\r\n\t\t\t// then it means that the header row should be rendered.\r\n\t\t\t// Otherwise, it wouldn't be rendered.\r\n\t\t\tif (columnSchema.column) {\r\n\t\t\t\theader = [schema.map((columnSchema) => ({\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\tvalue: columnSchema.column,\r\n\t\t\t\t\talign: columnSchema.align,\r\n\t\t\t\t\t// `getHeaderStyle()` overwrites `align`, if `getHeaderStyle()` is specified.\r\n\t\t\t\t\t...(getHeaderStyle ? getHeaderStyle(columnSchema) : DEFAULT_HEADER_STYLE)\r\n\t\t\t\t}))]\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tdata = header.concat(data.map((row) => schema.map(\r\n\t\t\t(columnSchema) => ({\r\n\t\t\t\t...columnSchema,\r\n\t\t\t\t...(columnSchema.getCellStyle ? columnSchema.getCellStyle(row) : undefined),\r\n\t\t\t\tvalue: columnSchema.value(row)\r\n\t\t\t})\r\n\t\t)))\r\n\t}\r\n\treturn data.map((row, index) => generateRow(row, index, {\r\n\t\tgetStyle,\r\n\t\tgetSharedString,\r\n\t\tcustomFont,\r\n\t\tdateFormat,\r\n\t\tusesSchema: schema !== undefined\r\n\t})).join('')\r\n}\r\n\r\nconst DEFAULT_HEADER_STYLE = {\r\n\tfontWeight: 'bold'\r\n}"],"mappings":";;;;;;;;;AAAA;AACA;;AAEA,OAAOA,WAAW,MAAM,UAAU;AAElC,eAAe,SAASC,YAAYA,CAACC,IAAI,EAAAC,IAAA,EAOtC;EAAA,IANFC,MAAM,GAAAD,IAAA,CAANC,MAAM;IACNC,cAAc,GAAAF,IAAA,CAAdE,cAAc;IACdC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IACRC,eAAe,GAAAJ,IAAA,CAAfI,eAAe;IACfC,UAAU,GAAAL,IAAA,CAAVK,UAAU;IACVC,UAAU,GAAAN,IAAA,CAAVM,UAAU;EAEV,IAAIL,MAAM,EAAE;IACX,IAAIM,MAAM,GAAG,EAAE;IACf,SAAAC,SAAA,GAAAC,+BAAA,CAA2BR,MAAM,GAAAS,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;MAAA,IAAxBC,YAAY,GAAAF,KAAA,CAAAG,KAAA;MACtB;MACA;MACA;MACA,IAAID,YAAY,CAACE,MAAM,EAAE;QACxBP,MAAM,GAAG,CAACN,MAAM,CAACc,GAAG,CAAC,UAACH,YAAY;UAAA,OAAAI,aAAA;YACjCC,IAAI,EAAEC,MAAM;YACZL,KAAK,EAAED,YAAY,CAACE,MAAM;YAC1BK,KAAK,EAAEP,YAAY,CAACO;UAAK,GAErBjB,cAAc,GAAGA,cAAc,CAACU,YAAY,CAAC,GAAGQ,oBAAoB;QAAA,CACvE,CAAC,CAAC;QACJ;MACD;IACD;IACArB,IAAI,GAAGQ,MAAM,CAACc,MAAM,CAACtB,IAAI,CAACgB,GAAG,CAAC,UAACO,GAAG;MAAA,OAAKrB,MAAM,CAACc,GAAG,CAChD,UAACH,YAAY;QAAA,OAAAI,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACTJ,YAAY,GACXA,YAAY,CAACW,YAAY,GAAGX,YAAY,CAACW,YAAY,CAACD,GAAG,CAAC,GAAGE,SAAS;UAC1EX,KAAK,EAAED,YAAY,CAACC,KAAK,CAACS,GAAG;QAAC;MAAA,CAEhC,CAAC;IAAA,EAAC,CAAC;EACJ;EACA,OAAOvB,IAAI,CAACgB,GAAG,CAAC,UAACO,GAAG,EAAEG,KAAK;IAAA,OAAK5B,WAAW,CAACyB,GAAG,EAAEG,KAAK,EAAE;MACvDtB,QAAQ,EAARA,QAAQ;MACRC,eAAe,EAAfA,eAAe;MACfC,UAAU,EAAVA,UAAU;MACVC,UAAU,EAAVA,UAAU;MACVoB,UAAU,EAAEzB,MAAM,KAAKuB;IACxB,CAAC,CAAC;EAAA,EAAC,CAACG,IAAI,CAAC,EAAE,CAAC;AACb;AAEA,IAAMP,oBAAoB,GAAG;EAC5BQ,UAAU,EAAE;AACb,CAAC","ignoreList":[]}