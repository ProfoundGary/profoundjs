{"version":3,"file":"cell.js","names":["$text","getAttributesString","generateCellNumber","convertDateToExcelSerial","generateCell","rowNumber","columnIndex","value","type","cellStyleId","getSharedString","cellAttributes","r","s","concat","Date","Error","getXlsxValue","getXlsxType","t","_getOpeningAndClosing","getOpeningAndClosingTags","_getOpeningAndClosing2","_slicedToArray","openingTags","closingTags","String","Number","Boolean","name","TAG_BRACKET_LEFT_REGEXP","xlsxType","getOpeningTags","replace"],"sources":["../../../../source/write/files/sheet.xml/cell.js"],"sourcesContent":["// import Integer, { isInteger } from '../types/Integer.js'\r\n// import URL, { isURL } from '../types/URL.js'\r\n// import Email, { isEmail } from '../types/Email.js'\r\n\r\nimport $text from '../../../xml/sanitizeText.js'\r\nimport getAttributesString from '../../../xml/getAttributesString.js'\r\n\r\nimport generateCellNumber from './helpers/generateCellNumber.js'\r\nimport convertDateToExcelSerial from './helpers/convertDateToExcelSerial.js'\r\n\r\nexport default function generateCell(\r\n  rowNumber,\r\n  columnIndex,\r\n  value,\r\n  type,\r\n  cellStyleId,\r\n  getSharedString\r\n) {\r\n  // Empty cells could be skipped completely,\r\n  // if they don't have a style applied to them,\r\n  // like border or background color.\r\n  if (value === null) {\r\n    if (!cellStyleId) {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  const cellAttributes = {\r\n    r: generateCellNumber(columnIndex, rowNumber)\r\n  }\r\n\r\n  // Available formatting style IDs (built-in in Excel):\r\n  // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n  // `2` — 0.00\r\n  // `3` —  #,##0\r\n  if (cellStyleId) {\r\n    // From the attribute s=\"12\" we know that the cell's formatting is stored at the 13th (zero-based index) <xf> within the <cellXfs>\r\n    cellAttributes.s = cellStyleId\r\n  }\r\n\r\n  if (value === null) {\r\n    return `<c${getAttributesString(cellAttributes)}/>`\r\n  }\r\n\r\n  // Validate date format.\r\n  if (type === Date && !cellStyleId) {\r\n    throw new Error('No \"format\" has been specified for a Date cell')\r\n  }\r\n\r\n  value = getXlsxValue(type, value, getSharedString)\r\n  type = getXlsxType(type)\r\n\r\n  // The default value for `t` is `\"n\"` (a number or a date).\r\n  if (type) {\r\n    cellAttributes.t = type\r\n  }\r\n\r\n  const [openingTags, closingTags] = getOpeningAndClosingTags(type)\r\n\r\n  return `<c${getAttributesString(cellAttributes)}>` +\r\n    openingTags +\r\n    value +\r\n    closingTags +\r\n    '</c>'\r\n}\r\n\r\nfunction getXlsxType(type) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      return 's'\r\n      // // \"inlineStr\" type is used instead of \"s\" to avoid creating a \"shared strings\" index.\r\n      // return 'inlineStr'\r\n\r\n    case Number:\r\n    // case Integer:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Date:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Boolean:\r\n      return 'b'\r\n\r\n    case 'Formula':\r\n      return 'f'\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nfunction getXlsxValue(type, value, getSharedString) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      if (typeof value !== 'string') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a string`)\r\n      }\r\n      // if (type === Email && !isEmail(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Email`)\r\n      // }\r\n      // if (type === URL && !isURL(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected a URL`)\r\n      // }\r\n      return getSharedString(value)\r\n\r\n    case Number:\r\n    // case Integer:\r\n      if (typeof value !== 'number') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a number`)\r\n      }\r\n      // if (type === Integer && !isInteger(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Integer`)\r\n      // }\r\n      return String(value)\r\n\r\n    case Date:\r\n      if (!(value instanceof Date)) {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a Date`)\r\n      }\r\n      // \"d\" type doesn't seem to work.\r\n      // return value.toISOString()\r\n      return String(convertDateToExcelSerial(value))\r\n\r\n    case Boolean:\r\n      if (typeof value !== 'boolean') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a boolean`)\r\n      }\r\n      return value ? '1' : '0'\r\n\r\n    case 'Formula':\r\n      if (typeof value !== 'string') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a string`)\r\n      }\r\n      return $text(value)\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nconst TAG_BRACKET_LEFT_REGEXP = /</g\r\n\r\nfunction getOpeningAndClosingTags(xlsxType) {\r\n  const openingTags = getOpeningTags(xlsxType)\r\n  const closingTags = openingTags.replace(TAG_BRACKET_LEFT_REGEXP, '</')\r\n  return [openingTags, closingTags]\r\n}\r\n\r\nfunction getOpeningTags(xlsxType) {\r\n  switch (xlsxType) {\r\n    case 'inlineStr':\r\n      return '<is><t>'\r\n    case 'f':\r\n      return '<f>'\r\n    default:\r\n      return '<v>'\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}