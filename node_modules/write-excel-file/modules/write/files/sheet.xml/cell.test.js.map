{"version":3,"file":"cell.test.js","names":["generateCell","describe","it","expect","to","String","undefined","equal","Number","cellStyleId","concat","Date"],"sources":["../../../../source/write/files/sheet.xml/cell.test.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/__test__/formatters/cells/formatCell.spec.js\r\n\r\nimport generateCell from './cell.js'\r\n\r\n// import Integer from '../types/Integer.js'\r\n// import Email from '../types/Email.js'\r\n// import URL from '../types/URL.js'\r\n\r\ndescribe('generateCell()', () => {\r\n  describe('Create a cell of type Sting', () => {\r\n    it('should throw if invalid type was supplied', () => {\r\n      expect(() => generateCell(1, 0, 'Test', 'Unsupported'))\r\n        .to.throw('Unknown schema type: Unsupported')\r\n    })\r\n\r\n    it('should create a cell', () => {\r\n      expect(generateCell(1, 0, 'Test', String, undefined, () => 0)).to.equal(\r\n        // '<c r=\"A1\" t=\"inlineStr\"><is><t>Test</t></is></c>'\r\n        '<c r=\"A1\" t=\"s\"><v>0</v></c>'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Create a cell of type Number', () => {\r\n    it('should create a cell', () => {\r\n      expect(generateCell(1, 1, 1000, Number))\r\n        .to.equal('<c r=\"B1\"><v>1000</v></c>')\r\n    })\r\n\r\n    it('should create a cell with a cell style ID', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 1, 1000, Number, cellStyleId))\r\n        .to.equal(`<c r=\"B1\" s=\"${cellStyleId}\"><v>1000</v></c>`)\r\n    })\r\n  })\r\n\r\n  // describe('Create a cell of type Integer', () => {\r\n  //   it('Create a cell', () => {\r\n  //     expect(generateCell(1, 1, 1000, Integer)).to.equal('<c r=\"B1\"><v>1000</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  // describe('Create a cell of type URL', () => {\r\n  //   it('should create a cell', () => {\r\n  //     expect(generateCell(1, 1, 'https://google.com', URL, undefined, () => 0))\r\n  //       // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>https://google.com</t></is></c>')\r\n  //       .to.equal('<c r=\"B1\" t=\"s\"><v>0</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  // describe('Create a cell of type Email', () => {\r\n  //   it('should create a cell', () => {\r\n  //     expect(generateCell(1, 1, 'example@domain.com', Email, undefined, () => 0))\r\n  //       // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>example@domain.com</t></is></c>')\r\n  //       .to.equal('<c r=\"B1\" t=\"s\"><v>0</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  describe('Create a cell of type Date', () => {\r\n    it('should throw if no date format was supplied', () => {\r\n      expect(() => generateCell(1, 0, new Date(2020, 11, 30), Date))\r\n        .to.throw('No \"format\"')\r\n    })\r\n\r\n    it('should create a cell', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, new Date(2020, 11, 30), Date, cellStyleId, () => 0))\r\n        // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>example@domain.com</t></is></c>')\r\n        .to.equal(`<c r=\"A1\" s=\"${cellStyleId}\"><v>44194.875</v></c>`)\r\n    })\r\n\r\n    it('should create an empty cell (`null`) (has custom style)', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, null, Date, cellStyleId, () => 0))\r\n        .to.equal('<c r=\"A1\" s=\"123\"/>')\r\n    })\r\n\r\n    it('should create an empty cell (`null`) (no custom style)', () => {\r\n      const cellStyleId = undefined\r\n      expect(generateCell(1, 0, null, Date, cellStyleId, () => 0))\r\n        .to.equal('')\r\n    })\r\n  })\r\n})"],"mappings":"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","ignoreList":[]}