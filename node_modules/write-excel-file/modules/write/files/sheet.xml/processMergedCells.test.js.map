{"version":3,"file":"processMergedCells.test.js","names":["processMergedCells","describe","it","data","value","span","undefined","expect","schema","to","deep","equal","mergedCells","rowSpan","color"],"sources":["../../../../source/write/files/sheet.xml/processMergedCells.test.js"],"sourcesContent":["import processMergedCells from './processMergedCells.js'\r\n\r\ndescribe('processMergedCells()', () => {\r\n  it('should process merged cells across columns', () => {\r\n    const data = [\r\n      [\r\n        { value: '1', span: 3 },\r\n        undefined,\r\n        null\r\n      ]\r\n    ]\r\n\r\n    expect(processMergedCells(data, { schema: undefined }))\r\n      .to.deep.equal({\r\n        data,\r\n        mergedCells: [\r\n          [\r\n            [0, 0],\r\n            [0, 2]\r\n          ]\r\n        ]\r\n      })\r\n  })\r\n\r\n  it('should process merged cells across columns and rows', () => {\r\n    const data = [\r\n      [\r\n        { value: '1.1' },\r\n        { value: '1.2' },\r\n        { value: '1.3' }\r\n      ],\r\n      [\r\n        { value: '2.1', span: 3, rowSpan: 2 },\r\n        null,\r\n        null\r\n      ],\r\n      [\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    ]\r\n\r\n    expect(processMergedCells(data, { schema: undefined }))\r\n      .to.deep.equal({\r\n        data,\r\n        mergedCells: [\r\n          [\r\n            [1, 0],\r\n            [2, 2]\r\n          ]\r\n        ]\r\n      })\r\n  })\r\n\r\n  it('should validate overlapping cells when using `span`', () => {\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1', span: 3 },\r\n        { value: '2' },\r\n        { value: '3' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 1 and column 2')\r\n  })\r\n\r\n  it('should validate overlapping cells when using `rowSpan`', () => {\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1.1', rowSpan: 2 },\r\n        { value: '1.2' }\r\n      ],\r\n      [\r\n        { value: '2.1' },\r\n        { value: '2.2' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 2 and column 1')\r\n  })\r\n\r\n  it('should validate overlapping cells when using `span` and `rowSpan`', () => {\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1.1' },\r\n        { value: '1.2' },\r\n        { value: '1.3' }\r\n      ],\r\n      [\r\n        { value: '2.1', span: 3, rowSpan: 2 },\r\n        { value: '2.2' },\r\n        { value: '2.3' }\r\n      ],\r\n      [\r\n        { value: '3.1' },\r\n        { value: '3.2' },\r\n        { value: '3.3' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 2 and column 2')\r\n\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1.1' },\r\n        { value: '1.2' },\r\n        { value: '1.3' }\r\n      ],\r\n      [\r\n        { value: '2.1', span: 3, rowSpan: 2 },\r\n        null,\r\n        null\r\n      ],\r\n      [\r\n        { value: '3.1' },\r\n        { value: '3.2' },\r\n        { value: '3.3' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 3 and column 1')\r\n  })\r\n\r\n  it('should copy styles to hidden cells in case of groups of merged cells', () => {\r\n    const data = [\r\n      [\r\n        { value: '1', span: 3, color: '#cc0000' },\r\n        undefined,\r\n        null\r\n      ]\r\n    ]\r\n\r\n    expect(processMergedCells(data, { schema: undefined }))\r\n      .to.deep.equal({\r\n        data: [\r\n          [\r\n            { value: '1', span: 3, color: '#cc0000' },\r\n            { color: '#cc0000' },\r\n            { color: '#cc0000' }\r\n          ]\r\n        ],\r\n        mergedCells: [\r\n          [\r\n            [0, 0],\r\n            [0, 2]\r\n          ]\r\n        ]\r\n      })\r\n  })\r\n})"],"mappings":"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","ignoreList":[]}