{"version":3,"file":"cell.js","names":["_sanitizeText","_interopRequireDefault","require","_getAttributesString","_generateCellNumber","_convertDateToExcelSerial","e","__esModule","_slicedToArray","r","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","length","n","l","Symbol","iterator","i","u","f","o","next","Object","done","push","value","isArray","generateCell","rowNumber","columnIndex","type","cellStyleId","getSharedString","cellAttributes","generateCellNumber","s","concat","getAttributesString","Date","Error","getXlsxValue","getXlsxType","_getOpeningAndClosing","getOpeningAndClosingTags","_getOpeningAndClosing2","openingTags","closingTags","String","Number","Boolean","convertDateToExcelSerial","$text","TAG_BRACKET_LEFT_REGEXP","xlsxType","getOpeningTags","replace"],"sources":["../../../../source/write/files/sheet.xml/cell.js"],"sourcesContent":["// import Integer, { isInteger } from '../types/Integer.js'\r\n// import URL, { isURL } from '../types/URL.js'\r\n// import Email, { isEmail } from '../types/Email.js'\r\n\r\nimport $text from '../../../xml/sanitizeText.js'\r\nimport getAttributesString from '../../../xml/getAttributesString.js'\r\n\r\nimport generateCellNumber from './helpers/generateCellNumber.js'\r\nimport convertDateToExcelSerial from './helpers/convertDateToExcelSerial.js'\r\n\r\nexport default function generateCell(\r\n  rowNumber,\r\n  columnIndex,\r\n  value,\r\n  type,\r\n  cellStyleId,\r\n  getSharedString\r\n) {\r\n  // Empty cells could be skipped completely,\r\n  // if they don't have a style applied to them,\r\n  // like border or background color.\r\n  if (value === null) {\r\n    if (!cellStyleId) {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  const cellAttributes = {\r\n    r: generateCellNumber(columnIndex, rowNumber)\r\n  }\r\n\r\n  // Available formatting style IDs (built-in in Excel):\r\n  // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n  // `2` — 0.00\r\n  // `3` —  #,##0\r\n  if (cellStyleId) {\r\n    // From the attribute s=\"12\" we know that the cell's formatting is stored at the 13th (zero-based index) <xf> within the <cellXfs>\r\n    cellAttributes.s = cellStyleId\r\n  }\r\n\r\n  if (value === null) {\r\n    return `<c${getAttributesString(cellAttributes)}/>`\r\n  }\r\n\r\n  // Validate date format.\r\n  if (type === Date && !cellStyleId) {\r\n    throw new Error('No \"format\" has been specified for a Date cell')\r\n  }\r\n\r\n  value = getXlsxValue(type, value, getSharedString)\r\n  type = getXlsxType(type)\r\n\r\n  // The default value for `t` is `\"n\"` (a number or a date).\r\n  if (type) {\r\n    cellAttributes.t = type\r\n  }\r\n\r\n  const [openingTags, closingTags] = getOpeningAndClosingTags(type)\r\n\r\n  return `<c${getAttributesString(cellAttributes)}>` +\r\n    openingTags +\r\n    value +\r\n    closingTags +\r\n    '</c>'\r\n}\r\n\r\nfunction getXlsxType(type) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      return 's'\r\n      // // \"inlineStr\" type is used instead of \"s\" to avoid creating a \"shared strings\" index.\r\n      // return 'inlineStr'\r\n\r\n    case Number:\r\n    // case Integer:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Date:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Boolean:\r\n      return 'b'\r\n\r\n    case 'Formula':\r\n      return 'f'\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nfunction getXlsxValue(type, value, getSharedString) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      if (typeof value !== 'string') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a string`)\r\n      }\r\n      // if (type === Email && !isEmail(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Email`)\r\n      // }\r\n      // if (type === URL && !isURL(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected a URL`)\r\n      // }\r\n      return getSharedString(value)\r\n\r\n    case Number:\r\n    // case Integer:\r\n      if (typeof value !== 'number') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a number`)\r\n      }\r\n      // if (type === Integer && !isInteger(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Integer`)\r\n      // }\r\n      return String(value)\r\n\r\n    case Date:\r\n      if (!(value instanceof Date)) {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a Date`)\r\n      }\r\n      // \"d\" type doesn't seem to work.\r\n      // return value.toISOString()\r\n      return String(convertDateToExcelSerial(value))\r\n\r\n    case Boolean:\r\n      if (typeof value !== 'boolean') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a boolean`)\r\n      }\r\n      return value ? '1' : '0'\r\n\r\n    case 'Formula':\r\n      if (typeof value !== 'string') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a string`)\r\n      }\r\n      return $text(value)\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nconst TAG_BRACKET_LEFT_REGEXP = /</g\r\n\r\nfunction getOpeningAndClosingTags(xlsxType) {\r\n  const openingTags = getOpeningTags(xlsxType)\r\n  const closingTags = openingTags.replace(TAG_BRACKET_LEFT_REGEXP, '</')\r\n  return [openingTags, closingTags]\r\n}\r\n\r\nfunction getOpeningTags(xlsxType) {\r\n  switch (xlsxType) {\r\n    case 'inlineStr':\r\n      return '<is><t>'\r\n    case 'f':\r\n      return '<f>'\r\n    default:\r\n      return '<v>'\r\n  }\r\n}"],"mappings":"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","ignoreList":[]}