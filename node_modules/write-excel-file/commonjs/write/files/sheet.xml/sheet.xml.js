"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateSheetXml;
var _rows = _interopRequireDefault(require("./rows.js"));
var _columns = _interopRequireDefault(require("./columns.js"));
var _processMergedCells2 = _interopRequireDefault(require("./processMergedCells.js"));
var _mergedCellsDescription = _interopRequireDefault(require("./mergedCellsDescription.js"));
var _layout = _interopRequireDefault(require("./layout.js"));
var _views = _interopRequireDefault(require("./views.js"));
var _drawing = _interopRequireDefault(require("./drawing.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
// Copy-pasted from:
// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/zipcelx.js
// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/templates/worksheet.xml.js

var SHEET_XML_TEMPLATE = "<?xml version=\"1.0\" ?>\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:mv=\"urn:schemas-microsoft-com:mac:vml\" xmlns:mx=\"http://schemas.microsoft.com/office/mac/excel/2008/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:xm=\"http://schemas.microsoft.com/office/excel/2006/main\">{views}{columnsDescription}<sheetData>{data}</sheetData>{mergedCellsDescription}{layout}{drawing}</worksheet>";
function generateSheetXml(data_, _ref) {
  var schema = _ref.schema,
    columns = _ref.columns,
    images = _ref.images,
    getHeaderStyle = _ref.getHeaderStyle,
    getStyle = _ref.getStyle,
    getSharedString = _ref.getSharedString,
    customFont = _ref.customFont,
    dateFormat = _ref.dateFormat,
    orientation = _ref.orientation,
    stickyRowsCount = _ref.stickyRowsCount,
    stickyColumnsCount = _ref.stickyColumnsCount,
    showGridLines = _ref.showGridLines,
    rightToLeft = _ref.rightToLeft,
    sheetId = _ref.sheetId;
  validateData(data_, {
    schema: schema
  });
  var _processMergedCells = (0, _processMergedCells2["default"])(data_, {
      schema: schema
    }),
    data = _processMergedCells.data,
    mergedCells = _processMergedCells.mergedCells;
  return SHEET_XML_TEMPLATE.replace('{data}', (0, _rows["default"])(data, {
    schema: schema,
    getHeaderStyle: getHeaderStyle,
    getStyle: getStyle,
    getSharedString: getSharedString,
    customFont: customFont,
    dateFormat: dateFormat
  })).replace('{views}', (0, _views["default"])({
    stickyRowsCount: stickyRowsCount,
    stickyColumnsCount: stickyColumnsCount,
    showGridLines: showGridLines,
    rightToLeft: rightToLeft
  })).replace('{columnsDescription}', (0, _columns["default"])({
    schema: schema,
    columns: columns
  })).replace('{mergedCellsDescription}', (0, _mergedCellsDescription["default"])(mergedCells)).replace('{layout}', (0, _layout["default"])({
    sheetId: sheetId,
    orientation: orientation
  })).replace('{drawing}', (0, _drawing["default"])({
    images: images
  }));
}
function validateData(data, _ref2) {
  var schema = _ref2.schema;
  if (schema) {
    if (!Array.isArray(data)) {
      throw new TypeError('Expected an array of objects');
    }
  } else {
    if (!Array.isArray(data)) {
      throw new TypeError('Expected an array of arrays');
    }
    if (data.length > 0) {
      if (!Array.isArray(data[0])) {
        throw new TypeError('Expected an array of arrays');
      }
    }
  }
}
//# sourceMappingURL=sheet.xml.js.map