{"version":3,"file":"generateCellNumber.js","names":["generateCellNumber","columnIndex","rowNumber","concat","generateColumnLetter","LETTERS_COUNT","prefix","Math","floor","letter","String","fromCharCode","toUpperCase"],"sources":["../../../../../source/write/files/sheet.xml/helpers/generateCellNumber.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/commons/generatorCellNumber.js\r\n\r\nexport default function generateCellNumber(columnIndex, rowNumber) {\r\n  return `${generateColumnLetter(columnIndex)}${rowNumber}`\r\n}\r\n\r\n// `26` letters in the alphabet: from \"A\" to \"Z\".\r\nconst LETTERS_COUNT = 26\r\n\r\nfunction generateColumnLetter(columnIndex) {\r\n  if (typeof columnIndex !== 'number') {\r\n    return ''\r\n  }\r\n  const prefix = Math.floor(columnIndex / LETTERS_COUNT)\r\n  // Letter character codes start at `97`.\r\n  const letter = String.fromCharCode(97 + (columnIndex % LETTERS_COUNT)).toUpperCase()\r\n  if (prefix === 0) {\r\n    return letter\r\n  }\r\n  return generateColumnLetter(prefix - 1) + letter\r\n}"],"mappings":";;;;;;AAAA;AACA;;AAEe,SAASA,kBAAkBA,CAACC,WAAW,EAAEC,SAAS,EAAE;EACjE,UAAAC,MAAA,CAAUC,oBAAoB,CAACH,WAAW,CAAC,EAAAE,MAAA,CAAGD,SAAS;AACzD;;AAEA;AACA,IAAMG,aAAa,GAAG,EAAE;AAExB,SAASD,oBAAoBA,CAACH,WAAW,EAAE;EACzC,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAO,EAAE;EACX;EACA,IAAMK,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACP,WAAW,GAAGI,aAAa,CAAC;EACtD;EACA,IAAMI,MAAM,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAIV,WAAW,GAAGI,aAAc,CAAC,CAACO,WAAW,CAAC,CAAC;EACpF,IAAIN,MAAM,KAAK,CAAC,EAAE;IAChB,OAAOG,MAAM;EACf;EACA,OAAOL,oBAAoB,CAACE,MAAM,GAAG,CAAC,CAAC,GAAGG,MAAM;AAClD","ignoreList":[]}