{"version":3,"file":"mergedCellsDescription.js","names":["_generateCellNumber","_interopRequireDefault","require","e","__esModule","_slicedToArray","r","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","length","n","l","Symbol","iterator","i","u","f","o","next","Object","done","push","value","isArray","generateMergedCellsDescription","mergedCells","concat","map","_ref","_ref2","to","coordinates","generateCellNumber","join"],"sources":["../../../../source/write/files/sheet.xml/mergedCellsDescription.js"],"sourcesContent":["import generateCellNumber from './helpers/generateCellNumber.js'\r\n\r\n// Supports \"merging cells\" across columns and rows.\r\n// https://rdrr.io/cran/openxlsx/man/mergeCells.html\r\n//\r\n// Returned XML example for merged cells range \"A2:C3\":\r\n// `<sheetData>...</sheetData><mergeCells count=\"1\"><mergeCell ref=\"A2:C3\"/></mergeCells>`\r\n//\r\n// Data example:\r\n//\r\n// rows:\r\n// [\r\n//   [...],\r\n//   [\r\n//     { type: String, value: 'abc', span: 3, rowSpan: 2 },\r\n//     { ... },\r\n//     { ... }\r\n//   ],\r\n//   [...]\r\n// ]\r\n\r\nexport default function generateMergedCellsDescription(mergedCells) {\r\n\tif (mergedCells.length === 0) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\treturn `<mergeCells count=\"${mergedCells.length}\">` +\r\n\t\tmergedCells.map(([from, to]) => {\r\n\t\t\tconst coordinates =\r\n\t\t\t\tgenerateCellNumber(from[1], from[0] + 1) +\r\n\t\t\t\t':' +\r\n\t\t\t\tgenerateCellNumber(to[1], to[0] + 1)\r\n\t\t\treturn `<mergeCell ref=\"${coordinates}\"/>`\r\n\t\t}).join('') +\r\n\t\t'</mergeCells>'\r\n}"],"mappings":";;;;;;AAAA,IAAAA,mBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAgE,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AAAA,SAAAE,eAAAC,CAAA,EAAAH,CAAA,WAAAI,eAAA,CAAAD,CAAA,KAAAE,qBAAA,CAAAF,CAAA,EAAAH,CAAA,KAAAM,2BAAA,CAAAH,CAAA,EAAAH,CAAA,KAAAO,gBAAA;AAAA,SAAAA,iBAAA,cAAAC,SAAA;AAAA,SAAAF,4BAAAH,CAAA,EAAAM,CAAA,QAAAN,CAAA,2BAAAA,CAAA,SAAAO,iBAAA,CAAAP,CAAA,EAAAM,CAAA,OAAAE,CAAA,MAAAC,QAAA,CAAAC,IAAA,CAAAV,CAAA,EAAAW,KAAA,6BAAAH,CAAA,IAAAR,CAAA,CAAAY,WAAA,KAAAJ,CAAA,GAAAR,CAAA,CAAAY,WAAA,CAAAC,IAAA,aAAAL,CAAA,cAAAA,CAAA,GAAAM,KAAA,CAAAC,IAAA,CAAAf,CAAA,oBAAAQ,CAAA,+CAAAQ,IAAA,CAAAR,CAAA,IAAAD,iBAAA,CAAAP,CAAA,EAAAM,CAAA;AAAA,SAAAC,kBAAAP,CAAA,EAAAM,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAN,CAAA,CAAAiB,MAAA,MAAAX,CAAA,GAAAN,CAAA,CAAAiB,MAAA,YAAApB,CAAA,MAAAqB,CAAA,GAAAJ,KAAA,CAAAR,CAAA,GAAAT,CAAA,GAAAS,CAAA,EAAAT,CAAA,IAAAqB,CAAA,CAAArB,CAAA,IAAAG,CAAA,CAAAH,CAAA,UAAAqB,CAAA;AAAA,SAAAhB,sBAAAF,CAAA,EAAAmB,CAAA,QAAAX,CAAA,WAAAR,CAAA,gCAAAoB,MAAA,IAAApB,CAAA,CAAAoB,MAAA,CAAAC,QAAA,KAAArB,CAAA,4BAAAQ,CAAA,QAAAX,CAAA,EAAAqB,CAAA,EAAAI,CAAA,EAAAC,CAAA,EAAAjB,CAAA,OAAAkB,CAAA,OAAAC,CAAA,iBAAAH,CAAA,IAAAd,CAAA,GAAAA,CAAA,CAAAE,IAAA,CAAAV,CAAA,GAAA0B,IAAA,QAAAP,CAAA,QAAAQ,MAAA,CAAAnB,CAAA,MAAAA,CAAA,UAAAgB,CAAA,uBAAAA,CAAA,IAAA3B,CAAA,GAAAyB,CAAA,CAAAZ,IAAA,CAAAF,CAAA,GAAAoB,IAAA,MAAAtB,CAAA,CAAAuB,IAAA,CAAAhC,CAAA,CAAAiC,KAAA,GAAAxB,CAAA,CAAAW,MAAA,KAAAE,CAAA,GAAAK,CAAA,iBAAAxB,CAAA,IAAAyB,CAAA,OAAAP,CAAA,GAAAlB,CAAA,yBAAAwB,CAAA,YAAAhB,CAAA,eAAAe,CAAA,GAAAf,CAAA,cAAAmB,MAAA,CAAAJ,CAAA,MAAAA,CAAA,2BAAAE,CAAA,QAAAP,CAAA,aAAAZ,CAAA;AAAA,SAAAL,gBAAAD,CAAA,QAAAc,KAAA,CAAAiB,OAAA,CAAA/B,CAAA,UAAAA,CAAA;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASgC,8BAA8BA,CAACC,WAAW,EAAE;EACnE,IAAIA,WAAW,CAAChB,MAAM,KAAK,CAAC,EAAE;IAC7B,OAAO,EAAE;EACV;EAEA,OAAO,uBAAAiB,MAAA,CAAsBD,WAAW,CAAChB,MAAM,WAC9CgB,WAAW,CAACE,GAAG,CAAC,UAAAC,IAAA,EAAgB;IAAA,IAAAC,KAAA,GAAAtC,cAAA,CAAAqC,IAAA;MAAdrB,IAAI,GAAAsB,KAAA;MAAEC,EAAE,GAAAD,KAAA;IACzB,IAAME,WAAW,GAChB,IAAAC,8BAAkB,EAACzB,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GACxC,GAAG,GACH,IAAAyB,8BAAkB,EAACF,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrC,2BAAAJ,MAAA,CAA0BK,WAAW;EACtC,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC,GACX,eAAe;AACjB","ignoreList":[]}